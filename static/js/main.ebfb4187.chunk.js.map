{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/getUser.tsx","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","email","name","className","href","TodoInfo","todo","id","completed","title","cn","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","addTodo","useState","setTitle","setUserId","hasTitleError","setTitleError","hasSelectError","setSelectError","action","method","onSubmit","event","preventDefault","trim","htmlFor","type","value","onChange","currentTarget","placeholder","initialTodos","getNewId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebfb4187.chunk.js","sourcesContent":["export interface User {\n  id: number,\n  name: string,\n  email: string,\n  username: string,\n}\n\nexport const UserInfo = ({ user }: { user: User }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\n\nimport { UserInfo } from '../UserInfo';\n\nexport interface Todo {\n  user: {\n    id: number,\n    name: string,\n    email: string,\n    username: string,\n  } | null,\n  id: number,\n  title: string,\n  completed: boolean;\n  userId: number;\n}\n\nexport const TodoInfo = ({ todo }: { todo: Todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <li\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      {user && <UserInfo user={user} /> }\n    </li>\n  );\n};\n","import { Todo, TodoInfo } from '../TodoInfo';\n\nexport const TodoList = ({ todos }: { todos: Todo[] }) => (\n  <ul>\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import { useState } from 'react';\n\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/getUser';\nimport { Todo } from '../TodoInfo';\n\ntype Props = {\n  addTodo: (user: Todo) => void\n};\n\nexport const TodoForm = ({ addTodo }: Props) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setTitleError] = useState(false);\n  const [hasSelectError, setSelectError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleError(false);\n    setSelectError(false);\n  };\n\n  const hendlerTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n    setTitleError(false);\n  };\n\n  const hendlerSelectChange = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.currentTarget.value);\n    setSelectError(false);\n  };\n\n  const hendlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setTitleError(!title.trim());\n    setSelectError(!userId);\n\n    if (!title.trim() || !userId) {\n      return;\n    }\n\n    addTodo({\n      user: getUserById(userId),\n      id: 0,\n      title,\n      completed: false,\n      userId,\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={hendlerSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"form-title\">\n          Title&nbsp;\n        </label>\n        <input\n          type=\"text\"\n          id=\"form-title\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={hendlerTitleChange}\n          placeholder=\"title\"\n        />\n        {hasTitleError && <span className=\"error\">Please enter a title</span> }\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={hendlerSelectChange}\n        >\n          <option>\n            Choose a user\n          </option>\n\n          {usersFromServer.map(user => (\n            <option\n              key={user.id}\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n        {hasSelectError\n        && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { getUserById } from './services/getUser';\nimport { Todo } from './components/TodoInfo';\n\nconst initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst getNewId = (todos: Todo[]) => {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm addTodo={addTodo} />\n\n      <section className=\"TodoList\">\n        <TodoList\n          todos={todos}\n        />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}