{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","services/getUser.tsx","components/TodoForm/TodoForm.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","TodoForm","addTodo","useState","setTitle","setUserId","hasTitleError","setTitleError","hasSelectError","setSelectError","action","method","onSubmit","event","preventDefault","htmlFor","type","value","onChange","currentTarget","placeholder","initialTodos","getNewId","Math","max","App","setTodos","newTodo","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.def6541f.chunk.js","sourcesContent":["export interface User {\n  id: number,\n  name: string,\n  email: string,\n  username: string,\n}\n\nexport const UserInfo = ({ user }: { user: User }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\n\nimport { UserInfo } from '../UserInfo';\n\nexport interface Todo {\n  user: {\n    id: number,\n    name: string,\n    email: string,\n    username: string,\n  } | null,\n  id: number,\n  title: string,\n  completed: boolean;\n  userId: number;\n}\n\nexport const TodoInfo = ({ todo }: { todo: Todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn('TodoInfo', { 'TodoInfo--completed': todo.completed })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n    {todo.user && <UserInfo user={todo.user} /> }\n  </article>\n);\n","import { Todo, TodoInfo } from '../TodoInfo';\n// import './index';\n\nexport const TodoList = ({ todos }: { todos: Todo[] }) => (\n  <div>\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </div>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n","import { useState } from 'react';\n\nimport usersFromServer from '../../api/users';\nimport { getUserById } from '../../services/getUser';\nimport { Todo } from '../TodoInfo';\n\ntype Props = {\n  addTodo: (user: Todo) => void\n};\n\nexport const TodoForm = ({ addTodo }: Props) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [hasTitleError, setTitleError] = useState(false);\n  const [hasSelectError, setSelectError] = useState(false);\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleError(false);\n    setSelectError(false);\n  };\n\n  const hendlerTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n    setTitleError(false);\n  };\n\n  const hendlerSelectChange = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.currentTarget.value);\n    setSelectError(false);\n  };\n\n  const hendlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setTitleError(!title);\n    setSelectError(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    addTodo({\n      user: getUserById(userId),\n      id: 0,\n      title,\n      completed: false,\n      userId,\n    });\n\n    reset();\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={hendlerSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"form-title\">\n          Title&nbsp;\n        </label>\n        <input\n          type=\"text\"\n          id=\"form-title\"\n          data-cy=\"titleInput\"\n          value={title}\n          onChange={hendlerTitleChange}\n          placeholder=\"title\"\n        />\n        {hasTitleError\n        && <span className=\"error\">Please enter a title</span> }\n      </div>\n\n      <div className=\"field\">\n        <select\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={hendlerSelectChange}\n        >\n          <option>\n            Choose a user\n          </option>\n\n          {\n            usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))\n          }\n        </select>\n        {hasSelectError\n        && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button\n        type=\"submit\"\n        data-cy=\"submitButton\"\n      >\n        Add\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm/TodoForm';\nimport { getUserById } from './services/getUser';\nimport { Todo } from './components/TodoInfo';\n\nconst initialTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst getNewId = (todos: Todo[]) => {\n  const maxId = Math.max(...todos.map(todo => todo.id));\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n\n  const addTodo = (todo: Todo) => {\n    const newTodo = {\n      ...todo,\n      id: getNewId(todos),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm addTodo={addTodo} />\n\n      <section className=\"TodoList\">\n        <TodoList\n          todos={todos}\n        />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}